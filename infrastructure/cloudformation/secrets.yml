AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Secrets Manager and Parameter Store for AWS Engineers Community'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name
  
  ProjectName:
    Type: String
    Default: multilingual-community
    Description: Project name for resource naming

Resources:
  # JWT署名キー用シークレット
  JWTKeysSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ProjectName}/${Environment}/jwt-keys'
      Description: 'JWT signing and refresh keys'
      GenerateSecretString:
        SecretStringTemplate: '{"refreshKey": ""}'
        GenerateStringKey: 'signingKey'
        PasswordLength: 64
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: SecretType
          Value: JWT

  # 外部API認証情報用シークレット（GitHub）
  GitHubAPISecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ProjectName}/${Environment}/github-api'
      Description: 'GitHub API authentication credentials'
      SecretString: !Sub |
        {
          "apiKey": "PLACEHOLDER_GITHUB_TOKEN",
          "endpoint": "https://api.github.com"
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: SecretType
          Value: ExternalAPI

  # SNSプロバイダー認証情報用シークレット（Twitter/X）
  TwitterAPISecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ProjectName}/${Environment}/twitter-api'
      Description: 'Twitter/X API authentication credentials'
      SecretString: !Sub |
        {
          "apiKey": "PLACEHOLDER_TWITTER_API_KEY",
          "apiSecret": "PLACEHOLDER_TWITTER_API_SECRET",
          "bearerToken": "PLACEHOLDER_TWITTER_BEARER_TOKEN"
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: SecretType
          Value: SNSProvider

  # LinkedIn API認証情報用シークレット
  LinkedInAPISecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ProjectName}/${Environment}/linkedin-api'
      Description: 'LinkedIn API authentication credentials'
      SecretString: !Sub |
        {
          "clientId": "PLACEHOLDER_LINKEDIN_CLIENT_ID",
          "clientSecret": "PLACEHOLDER_LINKEDIN_CLIENT_SECRET"
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: SecretType
          Value: SNSProvider

  # メール設定用シークレット
  EmailSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ProjectName}/${Environment}/email-config'
      Description: 'Email service configuration'
      SecretString: !Sub |
        {
          "smtpHost": "email-smtp.${AWS::Region}.amazonaws.com",
          "smtpUser": "PLACEHOLDER_SES_SMTP_USER",
          "smtpPassword": "PLACEHOLDER_SES_SMTP_PASSWORD",
          "fromAddress": "noreply@your-domain.com"
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: SecretType
          Value: Email

  # JWT署名キー自動ローテーション設定
  JWTKeysRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      SecretId: !Ref JWTKeysSecret
      RotationLambdaArn: !GetAtt JWTRotationLambda.Arn
      RotationRules:
        AutomaticallyAfterDays: 90

  # JWT署名キーローテーション用Lambda関数
  JWTRotationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-jwt-rotation'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt JWTRotationLambdaRole.Arn
      Code:
        ZipFile: |
          const { SecretsManagerClient, UpdateSecretCommand, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');
          const crypto = require('crypto');
          
          exports.handler = async (event) => {
            const client = new SecretsManagerClient({ region: process.env.AWS_REGION });
            const secretId = event.SecretId;
            
            try {
              // 現在のシークレットを取得
              const getCommand = new GetSecretValueCommand({ SecretId: secretId });
              const currentSecret = await client.send(getCommand);
              const secretValue = JSON.parse(currentSecret.SecretString);
              
              // 新しいJWT署名キーを生成
              const newSigningKey = crypto.randomBytes(64).toString('hex');
              const newRefreshKey = crypto.randomBytes(64).toString('hex');
              
              // シークレットを更新
              const updateCommand = new UpdateSecretCommand({
                SecretId: secretId,
                SecretString: JSON.stringify({
                  signingKey: newSigningKey,
                  refreshKey: newRefreshKey
                })
              });
              
              await client.send(updateCommand);
              
              return {
                statusCode: 200,
                body: JSON.stringify({ message: 'JWT keys rotated successfully' })
              };
            } catch (error) {
              console.error('JWT rotation failed:', error);
              throw error;
            }
          };
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # JWT ローテーション Lambda 実行ロール
  JWTRotationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-jwt-rotation-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:UpdateSecret
                Resource: !Ref JWTKeysSecret

  # Parameter Store パラメータ
  AppRegionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ProjectName}/${Environment}/app/region'
      Type: String
      Value: !Ref AWS::Region
      Description: 'Application AWS region'
      Tags:
        Environment: !Ref Environment
        Project: !Ref ProjectName

  LogLevelParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ProjectName}/${Environment}/app/log-level'
      Type: String
      Value: !If [IsProd, 'info', 'debug']
      Description: 'Application log level'
      Tags:
        Environment: !Ref Environment
        Project: !Ref ProjectName

  DynamoDBTablePrefixParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ProjectName}/${Environment}/dynamodb/table-prefix'
      Type: String
      Value: !Sub '${ProjectName}-${Environment}'
      Description: 'DynamoDB table name prefix'
      Tags:
        Environment: !Ref Environment
        Project: !Ref ProjectName

  S3BucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ProjectName}/${Environment}/s3/bucket-name'
      Type: String
      Value: !Sub '${ProjectName}-${Environment}-images-${AWS::AccountId}'
      Description: 'S3 bucket name for image storage'
      Tags:
        Environment: !Ref Environment
        Project: !Ref ProjectName

  TranslateSourceLanguagesParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ProjectName}/${Environment}/translate/source-languages'
      Type: StringList
      Value: 'ja,en,zh,ko,es,fr,de,pt,it,ru'
      Description: 'Supported source languages for translation'
      Tags:
        Environment: !Ref Environment
        Project: !Ref ProjectName

  CognitoUserPoolIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ProjectName}/${Environment}/cognito/user-pool-id'
      Type: String
      Value: 'PLACEHOLDER_USER_POOL_ID'
      Description: 'Cognito User Pool ID'
      Tags:
        Environment: !Ref Environment
        Project: !Ref ProjectName

  CognitoClientIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ProjectName}/${Environment}/cognito/client-id'
      Type: String
      Value: 'PLACEHOLDER_CLIENT_ID'
      Description: 'Cognito User Pool Client ID'
      Tags:
        Environment: !Ref Environment
        Project: !Ref ProjectName

Conditions:
  IsProd: !Equals [!Ref Environment, prod]

Outputs:
  JWTKeysSecretArn:
    Description: JWT Keys Secret ARN
    Value: !Ref JWTKeysSecret
    Export:
      Name: !Sub '${AWS::StackName}-JWTKeysSecret'

  GitHubAPISecretArn:
    Description: GitHub API Secret ARN
    Value: !Ref GitHubAPISecret
    Export:
      Name: !Sub '${AWS::StackName}-GitHubAPISecret'

  TwitterAPISecretArn:
    Description: Twitter API Secret ARN
    Value: !Ref TwitterAPISecret
    Export:
      Name: !Sub '${AWS::StackName}-TwitterAPISecret'

  LinkedInAPISecretArn:
    Description: LinkedIn API Secret ARN
    Value: !Ref LinkedInAPISecret
    Export:
      Name: !Sub '${AWS::StackName}-LinkedInAPISecret'

  EmailSecretArn:
    Description: Email Secret ARN
    Value: !Ref EmailSecret
    Export:
      Name: !Sub '${AWS::StackName}-EmailSecret'

  ParameterStorePrefix:
    Description: Parameter Store prefix
    Value: !Sub '/${ProjectName}/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ParameterStorePrefix'